{
  "manifest": {
    "name": "ansi_up",
    "version": "3.0.0",
    "description": "Convert ansi sequences in strings to colorful HTML",
    "keywords": [
      "ansi",
      "html"
    ],
    "author": {
      "name": "drudru",
      "email": "drudru@gmail.com"
    },
    "license": "MIT",
    "main": "./ansi_up.js",
    "types": "./dist/ansi_up.d.ts",
    "repository": {
      "type": "git",
      "url": "git://github.com/drudru/ansi_up.git"
    },
    "bugs": {
      "url": "http://github.com/drudru/ansi_up/issues"
    },
    "engines": {
      "node": "*"
    },
    "scripts": {
      "test": "make test",
      "build": "make typescript"
    },
    "devDependencies": {
      "mocha": "*",
      "should": "*",
      "typescript": "^2.1"
    },
    "_registry": "npm",
    "_loc": "/opt/app-root/src/.cache/yarn/v2/npm-ansi_up-3.0.0-27f45d8f457d9ceff59e4ea03c8e6f13c1a303e8/package.json",
    "readmeFilename": "Readme.md",
    "readme": "# ansi_up.js\n\n__ansi_up__ is a simple, easy to use library that provides a streaming API to\ntransform text containing\n[ANSI color escape codes](http://en.wikipedia.org/wiki/ANSI_escape_code#Colors) into proper HTML.\nIt can also transform any text that looks like a URL into an HTML anchor tag.\n\nThis module is a single Javascript file with no dependencies. It is a UMD style module so it\ncan be utilized in a browser, in node.js (CommonJS), or with AMD (require.js). The source code\nwas compiled from TypeScript and its type description ships with the NPM. This code has been used in production since 2011 and is actively maintained.\n\nFor example, turn this terminal output:\n\n    ESC[1;Foreground\n    \u001b[1;30m 30  \u001b[1;30m 30  \u001b[1;30m 30  \u001b[1;30m 30  \u001b[1;30m 30  \u001b[1;30m 30  \u001b[1;30m 30  \u001b[1;30m 30  \u001b[0m\n    \u001b[1;31m 31  \u001b[1;31m 31  \u001b[1;31m 31  \u001b[1;31m 31  \u001b[1;31m 31  \u001b[1;31m 31  \u001b[1;31m 31  \u001b[1;31m 31  \u001b[0m\n    \u001b[1;32m 32  \u001b[1;32m 32  \u001b[1;32m 32  \u001b[1;32m 32  \u001b[1;32m 32  \u001b[1;32m 32  \u001b[1;32m 32  \u001b[1;32m 32  \u001b[0m\n    ...\n\n...into this browser output:\n\n![](https://raw.github.com/drudru/ansi_up/master/sample.png)\n\n\n## Browser Example\n\n```HTML\n    <script src=\"ansi_up.js\" type=\"text/javascript\"></script>\n    <script type=\"text/javascript\">\n\n    var txt  = \"\\n\\n\\033[1;33;40m 33;40  \\033[1;33;41m 33;41  \\033[1;33;42m 33;42  \\033[1;33;43m 33;43  \\033[1;33;44m 33;44  \\033[1;33;45m 33;45  \\033[1;33;46m 33;46  \\033[1m\\033[0\\n\\n\\033[1;33;42m >> Tests OK\\n\\n\"\n\n    var ansi_up = new AnsiUp;\n\n    var html = ansi_up.ansi_to_html(txt);\n\n    var cdiv = document.getElementById(\"console\");\n\n    cdiv.innerHTML = html;\n\n    </script>\n```\n\n## Node Example\n\n```JavaScript\n    var AU = require('ansi_up');\n    var ansi_up = new AU.default;\n\n    var txt  = \"\\n\\n\\033[1;33;40m 33;40  \\033[1;33;41m 33;41  \\033[1;33;42m 33;42  \\033[1;33;43m 33;43  \\033[1;33;44m 33;44  \\033[1;33;45m 33;45  \\033[1;33;46m 33;46  \\033[1m\\033[0\\n\\n\\033[1;33;42m >> Tests OK\\n\\n\"\n\n    var html = ansi_up.ansi_to_html(txt);\n```\n\nMore examples are in the 'examples' directory in the repo.\n\n## Typescript Example\n\n```TypeScript\n    import {\n        default as AnsiUp\n    } from 'ansi_up';\n\n    const ansi_up = new AnsiUp();\n\n    const txt  = \"\\n\\n\\x1B[1;33;40m 33;40  \\x1B[1;33;41m 33;41  \\x1B[1;33;42m 33;42  \\x1B[1;33;43m 33;43  \\x1B[1;33;44m 33;44  \\x1B[1;33;45m 33;45  \\x1B[1;33;46m 33;46  \\x1B[1m\\x1B[0\\n\\n\\x1B[1;33;42m >> Tests OK\\n\\n\"\n\n    let html = ansi_up.ansi_to_html(txt);\n```\n\n## Installation\n\n    $ npm install ansi_up\n\n## Versions\n\nVersion 3.0 - now treats ANSI bold sequences as CSS font-weight:bold\nVersion 2.0 - moved to a stateful, streaming version of the API\nVersion 1.3 - was the last of the older, deprecated API.\n\n## Quick Start\n\n1. Use whatever module system to import the _ansi_up_ module.\n2. Instantiate the object.\n3. For every piece of input that arrives, call **ansi_to_html**.\n4. Append the emitted HTML to the previous HTML already emitted.\n\n\n## API Methods\n\nIn order to use _ansi_up_, you must Instantiate an object using your given module\nsystem.\n\n#### ansi_to_html (txt)\n\nThis replaces ANSI terminal escape codes/sequences with SPAN tags that wrap the content.\n\nThis function only interprets ANSI SGR (Select Graphic Rendition) codes that can be represented in HTML. For example, cursor movement codes are ignored and hidden from output.\n\nThe default style uses colors that are very close to the prescribed standard. The standard assumes that the text will have a black background. These colors are set as inline styles on the SPAN tags. Another option is to set 'use_classes: true' in the options argument. This will instead set classes on the spans so the colors can be set via CSS. The class names used are of the format ````ansi-*-fg/bg```` and ````ansi-bright-*-fg/bg```` where * is the colour name, i.e black/red/green/yellow/blue/magenta/cyan/white. See the examples directory for a complete CSS theme for these classes.\n\n#### ansi_to_text (txt)\n\nThis simply removes the ANSI escape codes from the stream.\nNo escaping is done.\n\n#### linkify(txt)\n\nThis replaces any links in the text with anchor tags that display the link.\nOnly strings starting with 'http' or 'https', and surrounded by whitespace are\nconsidered valid patterns.\nYou should only call this method if you can guarantee that the full URL\nwill be passed into ansi_to_html(). If the URL is split along a buffer\nboundary, then the wrong URL will be 'linkified'.\n\n## Properties\n\n#### escape_for_html\n(default: true)\n\nThis does the minimum escaping of text to make it compliant with HTML.\nIn particular, the '&','<', and '>' characters are escaped.\n\n\n#### use_classes\n(default: false)\n\nThis causes the SPAN tags to use class names for the color style instead\nof specified RGB values.\n\n## API Overview\n\nOn a high level, _ansi_up_ takes a stream of text and transforms it proper HTML with colors.\nIt does this by buffering the data and performing multiple passes over the\nstream. Each time it consumes data, it may or may not emit HTML. This HTML will always be\nproper HTML.\n\nBecause this process requires buffering (ie. stateful), you must insantiate an _ansi_up_ object\nin order to begin. Also, text may be received later that is styled by a previous.\n\nThe first pass converts characters that are unsafe for HTML into their equivalents. It will only\nconvert '&', '<', and '>' characters. This pass is optional, and is on by default.\n\nThe second pass converts any ANSI color sequences to HTML spans. It does this by recognizing\nwhat is termed as ANSI **SGR** codes. All ANSI sequences (SGR and non-SGR) are removed from the\noutput stream. The SGR codes create HTML **SPAN** tags to surround text that is styled by those\ncodes. If the ANSI sequence is incomplete, it will be held in _ansi_up_'s internal buffer\nuntil new data is received to complete it.\n\nThe third and final pass transforms URLs to HTML anchors. This will also buffer output until a non URL\ncharacter is received. This pass is optional, and is off by default.\n\n\n### Recommended Style of Use\n\nThere are two ways to stream this data to a web page. A push model or a pull model.\n\nI have personally used a pull model to 'tail' a file.\n\nIn my 'pull' model, I had a process generating a log file on a remote machine.\nI had a web server running on the same machine. I developed a simple page\nthat used AJAX to poll the web server periodically. Specifically I used an\nHTTP/1.1 GET request with RFC 7233 Range query. The server would return\neither range response.\n\nI would then process each chunk received with _ansi_up_, and append the new\nspans to the innerHTML of a PRE tag.\n\n\n### UTF8 note\n\nOne last important note, _ansi_up_ takes its input in the form of a Javascript string.\nThese strings are UTF8. When you take the output of some program and send it to\nJavascript, there will be buffering. Be sure to not send incomplete UTF8 sequences or\nJavascript will ignore or drop the sequence from the stream when it converts it to a\nstring.\n\n\n_ansi_up_ should be called via the functions defined on the module. It is recommended that the HTML is rendered with a monospace font and black background. See the examples, for a basic theme as a CSS definition.\nAt the same, it also properly escapes HTML unsafe characters (&,<,>,etc.) into their proper HTML representation.\n\n\n## Building\n\nTo build, a simple Makefile handles it all.\n\n```shell\n    $ make\n```\n\n## Running tests\n\nTo run the tests for _ansi_up_, run `npm install` to install dev dependencies. Then:\n\n```shell\n    $ make test\n```\n\n## Credits\n\nThis code was developed by Dru Nelson (<https://github.com/drudru>).\n\nThanks goes to the following contributors for their patches:\n\n- AIZAWA Hina (<https://github.com/fetus-hina>)\n- James R. White (<https://github.com/jamesrwhite>)\n- Aaron Stone (<https://github.com/sodabrew>)\n- Maximilian Antoni (<https://github.com/mantoni>)\n- Jim Bauwens (<https://github.com/jimbauwens>)\n- Jacek JÄ™drzejewski (<https://github.com/eXtreme>)\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 Dru Nelson\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/ansi_up/-/ansi_up-3.0.0.tgz#27f45d8f457d9ceff59e4ea03c8e6f13c1a303e8",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/ansi_up/-/ansi_up-3.0.0.tgz",
    "hash": "27f45d8f457d9ceff59e4ea03c8e6f13c1a303e8",
    "registry": "npm",
    "packageName": "ansi_up"
  },
  "registry": "npm",
  "hash": "27f45d8f457d9ceff59e4ea03c8e6f13c1a303e8"
}