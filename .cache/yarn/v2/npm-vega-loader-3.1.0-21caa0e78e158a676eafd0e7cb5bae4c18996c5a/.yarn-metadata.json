{
  "manifest": {
    "name": "vega-loader",
    "version": "3.1.0",
    "description": "Network request and file loading utilities.",
    "keywords": [
      "vega",
      "loader",
      "file",
      "http",
      "fetch",
      "json",
      "csv",
      "tsv",
      "topojson",
      "parse",
      "type",
      "inference"
    ],
    "license": "BSD-3-Clause",
    "author": {
      "name": "Jeffrey Heer",
      "url": "http://idl.cs.washington.edu"
    },
    "main": "build/vega-loader.js",
    "module": "index",
    "jsnext:main": "index",
    "repository": {
      "type": "git",
      "url": "https://github.com/vega/vega-loader.git"
    },
    "scripts": {
      "build": "npm run test && uglifyjs build/vega-loader.js -c -m -o build/vega-loader.min.js",
      "pretest": "rm -rf build && mkdir build&& rollup -f umd -g d3-dsv:d3,d3-time-format:d3,vega-util:vega,topojson-client:topojson -n vega -o build/vega-loader.js -- index.js",
      "test": "tape 'test/**/*-test.js' && eslint index.js src test",
      "prepublishOnly": "npm run build",
      "postpublish": "git push && git push --tags && zip -j build/vega-loader.zip -- LICENSE README.md build/vega-loader.js build/vega-loader.min.js"
    },
    "dependencies": {
      "d3-dsv": "^1.0.10",
      "d3-time-format": "^2.1.3",
      "node-fetch": "^2.3.0",
      "topojson-client": "^3.0.0",
      "vega-util": "^1.7.0"
    },
    "devDependencies": {
      "eslint": "5",
      "rollup": "0.67.4",
      "tape": "4",
      "uglify-js": "3"
    },
    "browser": {
      "buffer": false,
      "fs": false,
      "node-fetch": false
    },
    "_registry": "npm",
    "_loc": "/opt/app-root/src/.cache/yarn/v2/npm-vega-loader-3.1.0-21caa0e78e158a676eafd0e7cb5bae4c18996c5a/package.json",
    "readmeFilename": "README.md",
    "readme": "# vega-loader\n\nNetwork request and file loading utilities.\n\n## API Reference\n\n* [File Loading](#file-loading)\n* [Data Format Parsing](#data-format-parsing)\n\n### File Loading\n\n<a name=\"loader\" href=\"#loader\">#</a>\nvega.<b>loader</b>([<i>options</i>])\n[<>](https://github.com/vega/vega-loader/blob/master/src/loader.js \"Source\")\n\nCreates a new loader instance with default *options*. A loader object\nprovides methods for loading files from the network or disk, and for sanitizing\nrequested URLs and filenames. If provided, the key-value pairs in the *options*\nobject will be passed as default options to the various loader methods.\n\nThe *options* object can include the following entries:\n- *baseURL*: A base URL prefix to append to provided *uri* values. This can\nbe useful for applications that load multiple data sets from the same domain.\n- *mode*: A string explicitly indicating the loading mode. One of `'file'`\n(server-side only) or `'http'`. If set to `'file'` mode, later *uri* parameters\nmay safely omit a `'file://'` prefix.\n- *defaultProtocol*: The default protocol to use for protocol-relative *uri*\nvalues (e.g., `'//vega.github.io'`). Defaults to `'http'`.\n- *target*: The browser target attribute for hyperlinks. Only applies when\nsanitizing *uri* values for use as a hyperlink.\n- *http*: HTTP request parameters passed to underlying calls to\n[fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API); see\n[RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed properties.\n\n<a name=\"load\" href=\"#load\">#</a>\nloader.<b>load</b>(<i>uri</i>[, <i>options</i>])\n[<>](https://github.com/vega/vega-loader/blob/master/src/loader.js \"Source\")\n\nLoads a file from either the network or disk, and returns a\n[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\nfor asyncronously accessing the loaded content. This method does not perform\nany parsing, it simply returns the loaded data as either a Buffer or String\ninstance, depending on the execution environment. To subsequently parse loaded\ndata, use the [read](#read) method.\n\nThe *uri* argument is a value indicating the file to load. This is typically\neither an absolute or relative URL string. If running server-side via node.js,\nthis argument might also be a file path (e.g., `'file:///path/to/file.txt'`).\n\nIf provided, the *options* argument will be combined with any default options\npassed to the [loader](#loader) constructor. In the case of identical property\nnames, values from the *options* argument for this method will be used.\n\n```js\nvar loader = vega.loader();\nloader.load('data.json').then(function(data) {\n  // do something with loaded data\n}).catch(function(error) {\n  // error handling here\n});\n```\n\n<a name=\"load_sanitize\" href=\"load_sanitize\">#</a>\nloader.<b>sanitize</b>(<i>uri</i>, <i>options</i>)\n[<>](https://github.com/vega/vega-loader/blob/master/src/loader.js \"Source\")\n\nURI sanitizer function, which takes a *uri* and *options* object as input,\nand returns a Promise that resolves to a return object that includes a\nsanitized URL under the *href* property. This method is used internally by\n[load](#load) to ensure the URL is valid and to add additional protocol and\nhostname information, if needed. This method accepts the same *options* object\naccepted by [load](#load) and returns a Promise. If sanitization is successful,\nthe Promise resolves to a return object containing the URL string as (_href_),\nalong with a non-enumerable boolean _localFile_ flag, indicating if the file\nshould be loaded from the local filesystem. The Promise rejects if the *uri*\nis invalid or disallowed. This method is over-writable for clients who wish to\nimplement custom sanitization.\n\nIf provided, the *options* argument will be combined with any default options\npassed to the [loader](#loader) constructor. In the case of identical property\nnames, values from the *options* argument for this method will be used.\n\n<a name=\"load_http\" href=\"load_http\">#</a>\nloader.<b>http</b>(<i>url</i>, <i>options</i>)\n[<>](https://github.com/vega/vega-loader/blob/master/src/loader.js \"Source\")\n\nFunction used internally by [load](#load) for servicing HTTP requests. Uses\n[fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) by default.\nClients may overwrite this method to perform custom HTTP request handling.\n\nIf provided, the *options* argument may include any valid fetch\n[RequestInit](https://fetch.spec.whatwg.org/#requestinit) properties. The\nprovided *options* will be combined with any default options passed to the\n[loader](#loader) constructor under the *http* property. In the case of\nidentical property names, values from the *options* argument for this\nmethod will be used.\n\n<a name=\"load_file\" href=\"load_file\">#</a>\nloader.<b>file</b>(<i>filename</i>)\n[<>](https://github.com/vega/vega-loader/blob/master/src/loader.js \"Source\")\n\nFunction used internally by [load](#load) for local file system requests. This\nmethod is over-writable for clients who wish to implement custom file loading.\nUses the node.js [fs](https://nodejs.org/api/fs.html) module by default.\n\n### Data Format Parsing\n\n<a name=\"read\" href=\"#read\">#</a>\nvega.<b>read</b>(<i>data</i>, <i>schema</i>[, <i>dateParse</i>])\n[<>](https://github.com/vega/vega-loader/blob/master/src/read.js \"Source\")\n\nParse loaded *data* according to a given format *schema*. The *data* argument\nshould be either a String or Buffer instance, typically the result of\ncalling [load](#load).\n\nThe *schema* object contents may depend on the data format (see below).\nCommon options include:\n- *type*: The data format type, such as `json`, `csv`, `tsv`, or `topojson`.\n- *property*: For JSON types, specifies a property of the loaded JSON to\nreference. This is useful if a loaded JSON file contains multiple data sets\nand one would like to parse data under a specific property.\n- *parse*: When set to `'auto'` (the default), the method will perform type\ninference (using the [inferTypes](#inferTypes) method) to determine data types\nof each field. Alternatively, callers can specify parsing rules by providing\nan object mapping field names to data types (for example: `{'timestamp':\n'date', 'price': 'number'}`). The valid data type options are `'boolean'`,\n`'integer'`, `'number'`, `'date'`, and `'string'`.\n\nThe `'date'` data type also accepts an optional format string\n(`'date:format'`). If provided, the optional *dateParse* function is used to\ngenerate date-time parsers for a date format string. If *dateParse* is\nunspecified, the [d3-time-format](https://github.com/d3/d3-time-format)\nlibrary is used by default. Date-time format strings may be quoted\n(`date:'%A'`), but quoting is not required. In addition, parsing of\ndate-time format strings to UTC time is supported (`'utc:format'`).\n\n```js\n// read loaded csv data, automatically infer value types\nvar data = null;\nloader.load('data/stocks.csv').then(function(data) {\n  data = vega.read(csv_data, {type: 'csv', parse: 'auto'});\n});\n```\n\n```js\n// read loaded csv data, using provided value types\nvar data = null;\nloader.load('data/stocks.csv').then(function(data) {\n  data = vega.read(data, {\n    type: 'csv',\n    parse: {'date': 'date', 'price': 'number'}\n  });\n});\n```\n\n```js\n// read loaded topojson data, extract mesh of countries\nvar topojson = null;\nloader.load('data/world-110m.json').then(function(data) {\n  topojson = vega.read(data, {type: 'topojson', mesh: 'countries'});\n});\n```\n\n<a name=\"inferType\" href=\"#inferType\">#</a>\nvega.<b>inferType</b>(<i>values</i>[, <i>field</i>])\n[<>](https://github.com/vega/vega-loader/blob/master/src/type.js \"Source\")\n\nGiven an array of *values*, infers their data type as one of `'boolean'`,\n`'integer'`, `'number'`, `'date'`, or `'string'`. An optional *field* accessor\ncan be used to first extract values from the input array, and is equivalent to\nfirst calling `values.map(field)`.\n\n<a name=\"inferTypes\" href=\"#inferTypes\">#</a>\nvega.<b>inferTypes</b>(<i>data</i>, <i>fields</i>)\n[<>](https://github.com/vega/vega-loader/blob/master/src/type.js \"Source\")\n\nGiven an array of *data* objects and a list of string-typed field names\n(*fields*), infers the data type for each field. Returns an object that maps\nfield names to inferred types, determined using the [inferType](#inferType)\nmethod.\n\n<a name=\"typeParsers\" href=\"#typeParsers\">#</a>\nvega.<b>typeParsers</b>\n[<>](https://github.com/vega/vega-loader/blob/master/src/type.js \"Source\")\n\nAn object containing a set of parsing functions for converting input values\nto a specified data type. All parsing functions return `null` if the input\nis `null`, `undefined` or the empty string (`''`).\n\nThe supported functions are:\n- typeParsers.<b>boolean</b>(<i>value</i>): Parse the input *value* to a\nBoolean.\n- typeParsers.<b>integer</b>(<i>value</i>): Parse the input *value* to an\ninteger Number.\n- typeParsers.<b>number</b>(<i>value</i>): Parse the input *value* to a\nNumber.\n- typeParsers.<b>date</b>(<i>value</i>[, <i>parser</i>]): Parse the input\n*value* to a Date. If provided, the *parser* function is used to interpret\nthe *value*; otherwise `Date.parse` is used.\n- typeParsers.<b>string</b>(<i>value</i>): Parse the input *value* to a String.\nIf *value* is not already string-typed, it is coerced to a String.\n\n<a name=\"formats\" href=\"#formats\">#</a>\nvega.<b>formats</b>(<i>name</i>[, <i>format</i>])\n[<>](https://github.com/vega/vega-loader/blob/master/src/formats/index.js \"Source\")\n\nRegistry function for data format parsers. If invoked with two arguments, adds\na new *format* parser with the provided *name*. Otherwise, returns an existing\nparser with the given *name*. The method signature of a format parser is:\n- <b>format</b>(<i>data</i>, <i>options</i>)\n\nA format parser that accepts two arguments, the input *data* to parse\n(e.g., a block of CSV text) and a set of format-specific *options*.\nThe following data formats are registered by default:\n- *dsv*: Delimiter-separated values format. Each line of text is a record,\nwith each field separated by a delimiter string. Accepts a *delimiter* option\nindicating the delimiter string used to separate field values.\n- *csv*: Comma-separated values format. A *dsv* instance with a comma (`,`)\ndelimiter.\n- *tsv*: Tab-separated values format. A *dsv* instance with a tab (`\\t`)\ndelimiter.\n- *json*: [JavaScript Object Notation (JSON)](https://en.wikipedia.org/wiki/JSON)\nformat. Accepts a *property* option, indicating a sub-property of the parsed\nJSON to return; useful if a data array is nested within a larger object.\n- *topojson*: [TopoJSON](https://github.com/mbostock/topojson/wiki) format for\ncompressed encoding of geographic data. Requires either a *feature* option\nindicating the name of the geographic feature to extract (e.g., extracts\nindividual paths for all countries), or a *mesh* option indicating a feature\nname for which a single mesh should be extracted (e.g., all country\nboundaries in a single path). Please see the\n[TopoJSON documentation](https://github.com/mbostock/topojson/wiki) for more.\n",
    "licenseText": "Copyright (c) 2016, University of Washington Interactive Data Lab\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n  may be used to endorse or promote products derived from this software\n  without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/vega-loader/-/vega-loader-3.1.0.tgz#21caa0e78e158a676eafd0e7cb5bae4c18996c5a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/vega-loader/-/vega-loader-3.1.0.tgz",
    "hash": "21caa0e78e158a676eafd0e7cb5bae4c18996c5a",
    "registry": "npm",
    "packageName": "vega-loader"
  },
  "registry": "npm",
  "hash": "21caa0e78e158a676eafd0e7cb5bae4c18996c5a"
}