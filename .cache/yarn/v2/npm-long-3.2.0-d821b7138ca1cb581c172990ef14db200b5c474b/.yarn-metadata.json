{
  "manifest": {
    "name": "long",
    "version": "3.2.0",
    "author": {
      "name": "Daniel Wirtz",
      "email": "dcode@dcode.io"
    },
    "description": "A Long class for representing a 64-bit two's-complement integer value.",
    "main": "dist/long.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/dcodeIO/long.js.git"
    },
    "bugs": {
      "url": "https://github.com/dcodeIO/long.js/issues"
    },
    "keywords": [
      "math"
    ],
    "dependencies": {},
    "devDependencies": {
      "testjs": "latest",
      "closurecompiler": "^1.6",
      "metascript": "~0"
    },
    "license": "Apache-2.0",
    "engines": {
      "node": ">=0.6"
    },
    "scripts": {
      "build": "node scripts/build.js",
      "make": "npm run-script build && npm run-script compile && npm run-script compress && npm test",
      "compile": "ccjs dist/long.js --compilation_level=SIMPLE_OPTIMIZATIONS --create_source_map=dist/long.min.map > dist/long.min.js",
      "compress": "gzip -c -9 dist/long.min.js > dist/long.min.js.gz",
      "test": "node node_modules/testjs/bin/testjs tests/suite.js"
    },
    "_registry": "npm",
    "_loc": "/opt/app-root/src/.cache/yarn/v2/npm-long-3.2.0-d821b7138ca1cb581c172990ef14db200b5c474b/package.json",
    "readmeFilename": "README.md",
    "readme": "![long.js - A Long class for representing a 64 bit two's-complement integer ](https://raw.github.com/dcodeIO/long.js/master/long.png)\n=======\nA Long class for representing a 64 bit two's-complement integer value derived from the [Closure Library](https://github.com/google/closure-library)\nfor stand-alone use and extended with unsigned support.\n\n[![Build Status](https://travis-ci.org/dcodeIO/long.js.svg)](https://travis-ci.org/dcodeIO/long.js)\n[![Donate](https://raw.githubusercontent.com/dcodeIO/long.js/master/donate.png)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=dcode%40dcode.io&item_name=%3C3%20long.js)\n\nBackground\n----------\nAs of [ECMA-262 5th Edition](http://ecma262-5.com/ELS5_HTML.htm#Section_8.5), \"all the positive and negative integers\nwhose magnitude is no greater than 2<sup>53</sup> are representable in the Number type\", which is \"representing the\ndoubleprecision 64-bit format IEEE 754 values as specified in the IEEE Standard for Binary Floating-Point Arithmetic\".\nThe [maximum safe integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\nin JavaScript is 2<sup>53</sup>-1.\n\nExample: 2<sup>64</sup>-1 is 18446744073709551615 but in JavaScript it evaluates to `18446744073709552000`.\n\nFurthermore, bitwise operators in JavaScript \"deal only with integers in the range −2<sup>31</sup> through\n2<sup>31</sup>−1, inclusive, or in the range 0 through 2<sup>32</sup>−1, inclusive. These operators accept any value of\nthe Number type but first convert each such value to one of 2<sup>32</sup> integer values.\"\n\nIn some use cases, however, it is required to be able to reliably work with and perform bitwise operations on the full\n64 bits. This is where long.js comes into play.\n\nUsage\n-----\nThe class is compatible with CommonJS and AMD loaders and is exposed globally as `dcodeIO.Long` if neither is available.\n\n```javascript\nvar Long = require(\"long\");\n\nvar longVal = new Long(0xFFFFFFFF, 0x7FFFFFFF);\nconsole.log(longVal.toString());\n...\n```\n\nAPI\n---\n\n#### new Long(low, high=, unsigned=)\n\nConstructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\nSee the from* functions below for more convenient ways of constructing Longs.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| low             | *number*        | The low (signed) 32 bits of the long \n| high            | *number*        | The high (signed) 32 bits of the long \n| unsigned        | *boolean*       | Whether unsigned or not, defaults to `false` for signed \n\n---\n\n#### Long.MAX_UNSIGNED_VALUE\n\nMaximum unsigned value.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *!Long*         |\n\n#### Long.MAX_VALUE\n\nMaximum signed value.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *!Long*         |\n\n#### Long.MIN_VALUE\n\nMinimum signed value.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *!Long*         |\n\n#### Long.NEG_ONE\n\nSigned negative one.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *!Long*         |\n\n#### Long.ONE\n\nSigned one.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *!Long*         |\n\n#### Long.UONE\n\nUnsigned one.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *!Long*         |\n\n#### Long.UZERO\n\nUnsigned zero.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *!Long*         |\n\n#### Long.ZERO\n\nSigned zero.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *!Long*         |\n\n#### Long.fromBits(lowBits, highBits, unsigned=)\n\nReturns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\nassumed to use 32 bits.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| lowBits         | *number*        | The low 32 bits \n| highBits        | *number*        | The high 32 bits \n| unsigned        | *boolean*       | Whether unsigned or not, defaults to `false` for signed \n| **@returns**    | *!Long*         | The corresponding Long value \n\n#### Long.fromInt(value, unsigned=)\n\nReturns a Long representing the given 32 bit integer value.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| value           | *number*        | The 32 bit integer in question \n| unsigned        | *boolean*       | Whether unsigned or not, defaults to `false` for signed \n| **@returns**    | *!Long*         | The corresponding Long value \n\n#### Long.fromNumber(value, unsigned=)\n\nReturns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| value           | *number*        | The number in question \n| unsigned        | *boolean*       | Whether unsigned or not, defaults to `false` for signed \n| **@returns**    | *!Long*         | The corresponding Long value \n\n#### Long.fromString(str, unsigned=, radix=)\n\nReturns a Long representation of the given string, written using the specified radix.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| str             | *string*        | The textual representation of the Long \n| unsigned        | *boolean &#124; number* | Whether unsigned or not, defaults to `false` for signed \n| radix           | *number*        | The radix in which the text is written (2-36), defaults to 10 \n| **@returns**    | *!Long*         | The corresponding Long value \n\n#### Long.isLong(obj)\n\nTests if the specified object is a Long.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| obj             | ***             | Object \n| **@returns**    | *boolean*       | \n\n#### Long.fromValue(val)\n\nConverts the specified value to a Long.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| val             | *!Long &#124; number &#124; string &#124; !{low: number, high: number, unsigned: boolean}* | Value \n| **@returns**    | *!Long*         | \n\n---\n\n#### Long#high\n\nThe high 32 bits as a signed value.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *number*        |\n\n#### Long#low\n\nThe low 32 bits as a signed value.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *number*        |\n\n#### Long#unsigned\n\nWhether unsigned or not.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *boolean*       |\n\n#### Long#add(addend)\n\nReturns the sum of this and the specified Long.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| addend          | *!Long &#124; number &#124; string* | Addend \n| **@returns**    | *!Long*         | Sum \n\n#### Long#and(other)\n\nReturns the bitwise AND of this Long and the specified.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| other           | *!Long &#124; number &#124; string* | Other Long \n| **@returns**    | *!Long*         | \n\n#### Long#compare/comp(other)\n\nCompares this Long's value with the specified's.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| other           | *!Long &#124; number &#124; string* | Other value \n| **@returns**    | *number*        | 0 if they are the same, 1 if the this is greater and -1 if the given one is greater \n\n#### Long#divide/div(divisor)\n\nReturns this Long divided by the specified.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| divisor         | *!Long &#124; number &#124; string* | Divisor \n| **@returns**    | *!Long*         | Quotient \n\n#### Long#equals/eq(other)\n\nTests if this Long's value equals the specified's.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| other           | *!Long &#124; number &#124; string* | Other value \n| **@returns**    | *boolean*       | \n\n#### Long#getHighBits()\n\nGets the high 32 bits as a signed integer.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *number*        | Signed high bits \n\n#### Long#getHighBitsUnsigned()\n\nGets the high 32 bits as an unsigned integer.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *number*        | Unsigned high bits \n\n#### Long#getLowBits()\n\nGets the low 32 bits as a signed integer.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *number*        | Signed low bits \n\n#### Long#getLowBitsUnsigned()\n\nGets the low 32 bits as an unsigned integer.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *number*        | Unsigned low bits \n\n#### Long#getNumBitsAbs()\n\nGets the number of bits needed to represent the absolute value of this Long.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *number*        | \n\n#### Long#greaterThan/gt(other)\n\nTests if this Long's value is greater than the specified's.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| other           | *!Long &#124; number &#124; string* | Other value \n| **@returns**    | *boolean*       | \n\n#### Long#greaterThanOrEqual/gte(other)\n\nTests if this Long's value is greater than or equal the specified's.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| other           | *!Long &#124; number &#124; string* | Other value \n| **@returns**    | *boolean*       | \n\n#### Long#isEven()\n\nTests if this Long's value is even.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *boolean*       | \n\n#### Long#isNegative()\n\nTests if this Long's value is negative.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *boolean*       | \n\n#### Long#isOdd()\n\nTests if this Long's value is odd.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *boolean*       | \n\n#### Long#isPositive()\n\nTests if this Long's value is positive.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *boolean*       | \n\n#### Long#isZero()\n\nTests if this Long's value equals zero.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *boolean*       | \n\n#### Long#lessThan/lt(other)\n\nTests if this Long's value is less than the specified's.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| other           | *!Long &#124; number &#124; string* | Other value \n| **@returns**    | *boolean*       | \n\n#### Long#lessThanOrEqual/lte(other)\n\nTests if this Long's value is less than or equal the specified's.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| other           | *!Long &#124; number &#124; string* | Other value \n| **@returns**    | *boolean*       | \n\n#### Long#modulo/mod(divisor)\n\nReturns this Long modulo the specified.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| divisor         | *!Long &#124; number &#124; string* | Divisor \n| **@returns**    | *!Long*         | Remainder \n\n#### Long#multiply/mul(multiplier)\n\nReturns the product of this and the specified Long.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| multiplier      | *!Long &#124; number &#124; string* | Multiplier \n| **@returns**    | *!Long*         | Product \n\n#### Long#negate/neg()\n\nNegates this Long's value.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *!Long*         | Negated Long \n\n#### Long#not()\n\nReturns the bitwise NOT of this Long.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *!Long*         | \n\n#### Long#notEquals/neq(other)\n\nTests if this Long's value differs from the specified's.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| other           | *!Long &#124; number &#124; string* | Other value \n| **@returns**    | *boolean*       | \n\n#### Long#or(other)\n\nReturns the bitwise OR of this Long and the specified.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| other           | *!Long &#124; number &#124; string* | Other Long \n| **@returns**    | *!Long*         | \n\n#### Long#shiftLeft/shl(numBits)\n\nReturns this Long with bits shifted to the left by the given amount.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| numBits         | *number &#124; !Long* | Number of bits \n| **@returns**    | *!Long*         | Shifted Long \n\n#### Long#shiftRight/shr(numBits)\n\nReturns this Long with bits arithmetically shifted to the right by the given amount.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| numBits         | *number &#124; !Long* | Number of bits \n| **@returns**    | *!Long*         | Shifted Long \n\n#### Long#shiftRightUnsigned/shru(numBits)\n\nReturns this Long with bits logically shifted to the right by the given amount.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| numBits         | *number &#124; !Long* | Number of bits \n| **@returns**    | *!Long*         | Shifted Long \n\n#### Long#subtract/sub(subtrahend)\n\nReturns the difference of this and the specified Long.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| subtrahend      | *!Long &#124; number &#124; string* | Subtrahend \n| **@returns**    | *!Long*         | Difference \n\n#### Long#toInt()\n\nConverts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *number*        | \n\n#### Long#toNumber()\n\nConverts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *number*        | \n\n#### Long#toSigned()\n\nConverts this Long to signed.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *!Long*         | Signed long \n\n#### Long#toString(radix=)\n\nConverts the Long to a string written in the specified radix.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| radix           | *number*        | Radix (2-36), defaults to 10 \n| **@returns**    | *string*        | \n| **@throws**     | *RangeError*    | If `radix` is out of range \n\n#### Long#toUnsigned()\n\nConverts this Long to unsigned.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *!Long*         | Unsigned long \n\n#### Long#xor(other)\n\nReturns the bitwise XOR of this Long and the given one.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| other           | *!Long &#124; number &#124; string* | Other Long \n| **@returns**    | *!Long*         | \n\nDownloads\n---------\n* [Distributions](https://github.com/dcodeIO/long.js/tree/master/dist)\n* [ZIP-Archive](https://github.com/dcodeIO/long.js/archive/master.zip)\n* [Tarball](https://github.com/dcodeIO/long.js/tarball/master)\n\nLicense\n-------\nApache License, Version 2.0 - http://www.apache.org/licenses/LICENSE-2.0.html\n",
    "licenseText": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/long/-/long-3.2.0.tgz#d821b7138ca1cb581c172990ef14db200b5c474b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/long/-/long-3.2.0.tgz",
    "hash": "d821b7138ca1cb581c172990ef14db200b5c474b",
    "registry": "npm",
    "packageName": "long"
  },
  "registry": "npm",
  "hash": "d821b7138ca1cb581c172990ef14db200b5c474b"
}