{
  "manifest": {
    "name": "leb",
    "version": "0.3.0",
    "keywords": [
      "leb",
      "leb128",
      "uleb128",
      "int",
      "uint",
      "encoding",
      "decoding",
      "encode",
      "decode"
    ],
    "description": "LEB128 utilities for Node",
    "homepage": "https://github.com/Obvious/leb",
    "repository": {
      "type": "git",
      "url": "https://github.com/Obvious/leb.git"
    },
    "licenses": [
      {
        "type": "Apache 2.0",
        "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
      }
    ],
    "author": {
      "name": "Dan Bornstein",
      "email": "danfuzz@milk.com",
      "url": "http://www.milk.com/"
    },
    "maintainers": [
      {
        "name": "Dan Bornstein",
        "email": "danfuzz@obvious.com",
        "url": "http://www.milk.com/"
      }
    ],
    "main": "lib/leb.js",
    "engine": {
      "node": ">=0.6.0"
    },
    "scripts": {
      "test": "node test/test.js"
    },
    "_registry": "npm",
    "_loc": "/opt/app-root/src/.cache/yarn/v2/npm-leb-0.3.0-32bee9fad168328d6aea8522d833f4180eed1da3/package.json",
    "readmeFilename": "README.md",
    "readme": "leb: LEB128 utilities for Node\n==============================\n\nThis Node module provides several utility functions for\ndealing with the LEB128 family of integer representation formats.\n\nLEB128, which is short for \"Little-Endian Base 128\") is somewhat like\nUTF-8 in representing numbers using a variable number of bytes. Unlike\nUTF-8, LEB128 uses just the high bit of each byte to determine the\nrole of a byte. This makes it a somewhat more compact representation\nbut with some cost in terms of the complexity on the read side.\n\nLEB128 was first defined as part of the \n[DWARF 3 specification](http://dwarfstd.org/Dwarf3Std.php), and it\nis also used in Android's\n[DEX file format](http://http://source.android.com/tech/dalvik/dex-format.html).\n\nThis module provides encoders and decoders for both signed and\nunsigned values, and with the decoded form being any of 32-bit\nintegers, 64-bit integers, and arbitrary-length buffer (taken to be a\nbigint-style representation in little-endian order).\n\nThe 64-bit integer variants require a special note: Because JavaScript\ncan't represent all possible 64-bit integers in its native number\ntype, the 64-bit decoder methods return a `lossy` flag which indicates\nif the decoded result isn't exactly the number represented in the\nencoded form.\n\n\nFormat Details\n--------------\n\nThe LEB128 format is really quite simple.\n\nAn encoded value is a series of bytes where the high bit (bit #7 or\n`0x80`) is set on each byte but the final one. The other seven bits\nof each byte are the payload bits.\n\nTo interpret an encoded value, one concatenates the payload bits\nin little-endian order (so the *first* payload byte contains the\n*least* significant bits). After that, if the encoded value is\na signed representation, one sign-extends the result.\n\nSchematically, here are the one-byte encodings:\n\n```\n               +--------+\nencoded        |0GFEDCBA|\n               +--------+\n\nunsigned       +--------+\ninterpretation |0GFEDCBA|\n               +--------+\n\nsigned         +--------+\ninterpretation |GGFEDCBA|\n               +--------+\n```\n\nThat is: The unsigned interpretation of a single-byte encoding is the\nbyte value itself. The signed interpretation is of the value as a\nsigned seven-bit integer.\n\nSimilarly, here are the two-byte encodings:\n\n```\n               +--------+ +--------+\nencoded        |1GFEDCBA| |0NMLKJIH|\n               +--------+ +--------+\n\nunsigned       +----------------+\ninterpretation |00NMLKJIHGFEDCBA|\n               +----------------+\n\nsigned         +----------------+\ninterpretation |NNNMLKJIHGFEDCBA|\n               +----------------+\n```\n\nThat is: The unsigned interpretation of a two-byte encoding is\na 14-bit integer consisting of the first-byte payload bits and\nsecond-byte payload bits concatenated togther. The signed\ninterpretation is the same as the unsigned, except that bit #13\nis treated as the sign and is hence extended to fill the remaining\nbits.\n\nSome concrete examples (all numbers are hex):\n\n```\nencoded      unsigned          signed\nbytes        interpretation    interpretation\n-------      --------------    --------------\n10           +10               +10\n45           +45               -3b\n8e 32        +190e             +190e\nc1 57        +2bc1             -143f\n80 80 80 3f  +7e00000          +7e00000\n80 80 80 4f  +9e00000          -6200000\n```\n\n\nBuilding and Installing\n-----------------------\n\n```shell\nnpm install leb\n```\n\nOr grab the source. As of this writing, this module has no\ndependencies, so once you have the source, there's nothing more to do\nto \"build\" it.\n\n\nTesting\n-------\n\n```shell\nnpm test\n```\n\nOr\n\n```shell\nnode ./test/test.js\n```\n\n\nAPI Details\n-----------\n\n\n### decodeInt32(buffer, [index]) -> { value: num, nextIndex: num }\n\nTakes a signed LEB128-encoded byte sequence in the given buffer at the\ngiven index (defaults to `0`), returning the decoded value and the\nindex just past the end of the encoded form. The value is expected to\nbe a 32-bit integer.\n\nThis throws an exception if the buffer doesn't have a valid encoding\nat the index (only possibly true if the last byte in the buffer has\nits high bit set) or if the decoded value is out of the range of the\nexpected type.\n\n### decodeInt64(buffer, [index]) -> { value: num, nextIndex: num, lossy: bool }\n\nTakes a signed LEB128-encoded byte sequence in the given buffer at the\ngiven index (defaults to `0`), returning the decoded value, the index\njust past the end of the encoded form, and a boolean indicating\nwhether the decoded value experienced numeric conversion loss. The\nvalue is expected to be a 64-bit integer.\n\nThis throws an exception if the buffer doesn't have a valid encoding\nat the index (only possibly true if the last byte in the buffer has\nits high bit set) or if the decoded value is out of the range of the\nexpected type.\n\n### decodeIntBuffer(encodedBuffer, [index]) -> { value: buffer, nextIndex: num }\n\nTakes a signed LEB128-encoded byte sequence in the given buffer at the\ngiven index (defaults to `0`), returning the decoded value and the\nindex just past the end of the encoded form. The decoded value is a\nbigint-style buffer representing a signed integer, in little-endian\norder.\n\nThis throws an exception if the buffer doesn't have a valid encoding\nat the index (only possibly true if the last byte in the buffer has\nits high bit set).\n\n### decodeUint32(buffer, [index]) -> { value: num, nextIndex: num }\n\nLike `decodeInt32`, but with the unsigned LEB128 format and unsigned\n32-bit integer type.\n\n### decodeUint64(buffer, [index]) -> { value: num, nextIndex: num, lossy: bool }\n\nLike `decodeInt64`, but with the unsigned LEB128 format and unsigned\n64-bit integer type.\n\n### decodeUintBuffer(encodedBuffer, [index]) -> { value: buffer, nextIndex: num }\n\nLike `decodeIntBuffer`, but with the unsigned LEB128 format.\n\n### encodeInt32(num) -> buffer\n\nTakes a 32-bit signed integer, returning the signed LEB128 representation\nof it.\n\n### encodeInt64(num) -> buffer\n\nTakes a 64-bit signed integer, returning the signed LEB128 representation\nof it.\n\n### encodeIntBuffer(buffer) -> encodedBuf\n\nTakes a bigint-style buffer representing a signed integer, returning the\nsigned LEB128 representation of it.\n\n### encodeUint32(num) -> buffer\n\nLike `encodeInt32`, but with the unsigned 32-bit integer type and returning\nunsigned LEB128.\n\n### encodeUint64(num) -> buffer\n\nLike `encodeInt64`, but with the unsigned 64-bit integer type and returning\nunsigned LEB128.\n\n### encodeUintBuffer(buffer) -> encodedBuf\n\nLike `encodeInt32`, but with the buffer argument in unsigned bigint form\nand returning unsigned LEB128.\n\n\nTo Do\n-----\n\n* Figure out something to do.\n\n\nContributing\n------------\n\nQuestions, comments, bug reports, and pull requests are all welcome.\nSubmit them at [the project on GitHub](https://github.com/Obvious/leb/).\n\nBug reports that include steps-to-reproduce (including code) are the\nbest. Even better, make them in the form of pull requests that update\nthe test suite. Thanks!\n\n\nAuthor\n------\n\n[Dan Bornstein](https://github.com/danfuzz)\n([personal website](http://www.milk.com/)), supported by\n[The Obvious Corporation](http://obvious.com/).\n\n\nLicense\n-------\n\nCopyright 2012 [The Obvious Corporation](http://obvious.com/).\n\nLicensed under the Apache License, Version 2.0. \nSee the top-level file `LICENSE.txt` and\n(http://www.apache.org/licenses/LICENSE-2.0).\n\n\n",
    "licenseText": "Copyright 2012 The Obvious Corporation.\nhttp://obvious.com/\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n",
    "license": "Apache-2.0"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/leb/-/leb-0.3.0.tgz#32bee9fad168328d6aea8522d833f4180eed1da3",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/leb/-/leb-0.3.0.tgz",
    "hash": "32bee9fad168328d6aea8522d833f4180eed1da3",
    "registry": "npm",
    "packageName": "leb"
  },
  "registry": "npm",
  "hash": "32bee9fad168328d6aea8522d833f4180eed1da3"
}