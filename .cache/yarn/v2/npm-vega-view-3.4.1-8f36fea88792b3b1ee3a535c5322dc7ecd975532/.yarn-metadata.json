{
  "manifest": {
    "name": "vega-view",
    "version": "3.4.1",
    "description": "View component and transforms for Vega visualizations.",
    "keywords": [
      "vega",
      "view",
      "layout"
    ],
    "license": "BSD-3-Clause",
    "author": {
      "name": "Jeffrey Heer",
      "url": "http://idl.cs.washington.edu"
    },
    "main": "build/vega-view.js",
    "module": "index",
    "jsnext:main": "index",
    "repository": {
      "type": "git",
      "url": "https://github.com/vega/vega-view.git"
    },
    "scripts": {
      "build": "npm run test && uglifyjs build/vega-view.js -c -m -o build/vega-view.min.js",
      "pretest": "rm -rf build && mkdir build && rollup -g d3-array:d3,d3-timer:d3,vega-dataflow:vega,vega-parser:vega,vega-runtime:vega,vega-scenegraph:vega,vega-util:vega -f umd -n vega -o build/vega-view.js -- index.js",
      "test": "tape 'test/**/*-test.js' && eslint index.js src",
      "prepublishOnly": "npm run build",
      "postpublish": "git push && git push --tags && zip -j build/vega-view.zip -- LICENSE README.md build/vega-view.js build/vega-view.min.js"
    },
    "dependencies": {
      "d3-array": "^2.0.2",
      "d3-timer": "^1.0.9",
      "vega-dataflow": "^4.1.0",
      "vega-parser": "^3.9.0",
      "vega-runtime": "^3.2.0",
      "vega-scenegraph": "^3.2.3",
      "vega-util": "^1.7.0"
    },
    "devDependencies": {
      "eslint": "5",
      "rollup": "0.67.4",
      "tape": "4",
      "uglify-js": "3"
    },
    "_registry": "npm",
    "_loc": "/opt/app-root/src/.cache/yarn/v2/npm-vega-view-3.4.1-8f36fea88792b3b1ee3a535c5322dc7ecd975532/package.json",
    "readmeFilename": "README.md",
    "readme": "# vega-view\n\nView component for Vega visualizations. A **View** instantiates\nan underlying dataflow graph and provides a component for rendering and\ninteracting with a visualization. When initialized with a container DOM\nelement, the View adds a Canvas or SVG-based visualization to a web page.\nAlternatively, a View can be used either client-side or server-side to\nexport static SVG or PNG (Canvas) images.\n\n## View API Reference\n\n* [View Construction](#view-construction)\n* [View Configuration](#view-configuration)\n* [Dataflow and Rendering](#dataflow-and-rendering)\n* [Signals](#signals)\n* [Event Handling](#event-handling)\n* [Image Export](#image-export)\n* [Data and Scales](#data-and-scales)\n\n### View Construction\n\nMethods for constructing and deconstructing views. In addition to the methods\ndescribed below, View instances also inherit all (non-overridden) methods of\nthe [vega-dataflow](https://github.com/vega/vega-dataflow)\n[Dataflow](https://github.com/vega/vega-dataflow/blob/master/src/dataflow/Dataflow.js)\nparent class.\n\n<a name=\"view\" href=\"#view\">#</a>\nvega.<b>View</b>(<i>runtime</i>[, <i>options</i>])\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nConstructor that creates a new View instance for the provided\n[Vega dataflow *runtime* specification](https://github.com/vega/vega-runtime).\nIf provided, the *options* argument should be an object with one or more\nof the following properties:\n\n- *loader*: Default [loader](https://github.com/vega/vega-loader#loader)\ninstance to use for data files and images.\n- *logLevel*: Initial log level to use. See the [logLevel](#view_logLevel)\nmethod.\n- *renderer*: The type of renderer to use (`'canvas'` or `'svg'`). See the\n[renderer](#view_renderer) method.\n- *tooltip*: Handler function invoked to support tooltip display. See the\n[tooltip](#view_tooltip) method.\n\nThe View constructor call is typically followed by a chain of method calls\nto setup the desired view configuration. At the end of this chain,\nthe [run](#view_run) method evaluates the underlying dataflow graph to update\nand render the visualization.\n\n```js\nvar view = new vega.View(runtime)\n  .logLevel(vega.Warn) // set view logging level\n  .initialize(document.querySelector('#view')) // set parent DOM element\n  .renderer('svg') // set render type (defaults to 'canvas')\n  .hover() // enable hover event processing\n  .run(); // update and render the view\n\n```\n\n<a name=\"view_finalize\" href=\"#view_finalize\">#</a>\nview.<b>finalize</b>()\n[<>](https://github.com/vega/vega-view/blob/master/src/finalize.js \"Source\")\n\nPrepares the view to be removed. To prevent unwanted behaviors and memory\nleaks, this method unregisters any timers and removes any event listeners\nthe visualization has registered on external DOM elements. Applications\nshould invoke this method when a View instance is no longer needed.\n\n### View Configuration\n\nMethods for configuring the view state. These methods are often (but not\nalways) invoked immediately after the View constructor, prior to the first\ninvocation of the [run](#view_run) method.\n\n<a name=\"view_initialize\" href=\"#view_initialize\">#</a>\nview.<b>initialize</b>([<i>container</i>, <i>bindContainer</i>])\n[<>](https://github.com/vega/vega-view/blob/master/src/initialize.js \"Source\")\n\nInitializes internal rendering and event handling, then returns this view\ninstance. If the DOM element *container* is provided, visualization\nelements (such as Canvas or SVG HTML elements) will be added to the web page\nunder this containing element. If *container* is not provided, the view\nwill operate in *headless* mode, and can still generate static visualization\nimages using the [image export](#image-export) methods. The optional DOM\nelement (or unique CSS selector) *bindContainer* indicates the element that\nshould contain any input elements bound to signals; if not specified the\nsame container element as the visualization will be used.\n\n<a name=\"view_loader\" href=\"#view_loader\">#</a>\nview.<b>loader</b>([<i>loader</i>])\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nGet or set the [loader](https://github.com/vega/vega-loader#loader) instance\nto use for data files and images. If the loader is updated _after_\n[initialize](#view_initialize) has been invoked, the visualization will be\nreinitialized. If a Vega View loads data from an external URL, the load request\nis made _immediately_ upon view construction. To ensure a custom loader is used,\n_provide the loader as a constructor option!_ Invoking this method will update\nthe loader only _after_ initial data requests have been made.\n\n<a name=\"view_logLevel\" href=\"#view_logLevel\">#</a>\nview.<b>logLevel</b>(<i>level</i>)\n[<>](https://github.com/vega/vega-dataflow/blob/master/src/dataflow/Dataflow.js \"Source\")\n\nSets the current log level and returns this view instance. This method controls\nwhich types of log messages are printed to the JavaScript console, and is\ninherited from the\n[Dataflow](https://github.com/vega/vega-dataflow/blob/master/src/dataflow/Dataflow.js)\nparent class. The valid *level* values are `vega.None` (the default),\n`vega.Warn`, `vega.Info`, `vega.Debug`. See the\n[logger](https://github.com/vega/vega-util/#logger) method in\n[vega-util](https://github.com/vega/vega-util) for more.\n\n<a name=\"view_renderer\" href=\"#view_renderer\">#</a>\nview.<b>renderer</b>(<i>type</i>)\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nSets the renderer *type* (e.g., `'canvas'` (the default) or `'svg'`) and\nreturns this view instance. While typically invoked immediately upon view\ncreation, this method can be called at any time to change the renderer.\n\nAdditional renderer types may be used if registered via the\n[renderModule](https://github.com/vega/vega-scenegraph/blob/master/src/modules.js)\nmethod exported by [vega-scenegraph](https://github.com/vega/vega-scenegraph);\nfor an example see the\n[vega-webgl-renderer](https://github.com/vega/vega-webgl-renderer).\n\n<a name=\"view_tooltip\" href=\"#view_tooltip\">#</a>\nview.<b>tooltip</b>(<i>tooltipHandler</i>)\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nGet or set the tooltip handler function, which is invoked to handle display\nof tooltips (for example, when users hover the mouse cursor over an item).\nThe *tooltipHandler* argument should be a function that respects the\nfollowing method signature:\n\n```js\nfunction(handler, event, item, value) {\n  // perform custom tooltip presentation\n}\n```\n\nThe *tooltipHandler* function arguments are:\n\n- *handler* - The scenegraph input [Handler](https://github.com/vega/vega-scenegraph/blob/master/src/Handler.js) instance\nthat invoked the *tooltipHandler* function.\n- *event* - The [event](https://developer.mozilla.org/en-US/docs/Web/Events)\nthat caused an update to the tooltip display.\n- *item* - The scenegraph item corresponding to the tooltip.\n- *value* - The tooltip value to display. If `null` or `undefined`, indicates\nthat no tooltip should be shown. The tooltip *value* may have an arbitrary\ntype, including Object and Array values. It is up the *tooltipHandler* to\nappropriately interpret and display this value.\n- In addition, Vega invokes the *tooltipHander* using the current View as the\n*this* context for the function.\n\nThe default handler uses built-in browser support to show tooltips. It takes\na value to show in a tooltip, transforms it to a string value, and sets the\nHTML `\"title\"` attribute on the element containing the View. The default\nhandler will coerce literal values to strings, and will show the contents\nof Object or Array values (up to one level of depth). For Object values, each\nkey-value pair is displayed on its own line of text\n(`\"key1: value\\nkey2: value2\"`).\n\n<a name=\"view_hover\" href=\"#view_hover\">#</a>\nview.<b>hover</b>([<i>hoverSet</i>, <i>updateSet</i>])\n[<>](https://github.com/vega/vega-view/blob/master/src/hover.js \"Source\")\n\nEnables hover event processing and returns this view instance. The optional\narguments specify which named encoding sets to invoke upon mouseover and\nmouseout. The *hoverSet* defaults to `'hover'`, corresponding to the `\"hover\"`\nset within a Vega mark specification `\"encode\"` block. The *updateSet*\ndefaults to `'update'`, corresponding to the `\"update\"` set within a Vega mark\nspecification `\"encode\"` block. If this method is never invoked, the view will\nnot automatically handle hover events. Instead, the underlying dataflow\ndefinition will have to explicitly set up event streams for handling mouseover\nand mouseout events.\n\n<a name=\"view_background\" href=\"#view_background\">#</a>\nview.<b>background</b>([<i>color</i>])\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nGets or sets the view background color. If no arguments are provided, returns\nthe current background color. If *color* is specified, this method sets the\nbackground color and returns this view instance. This method does not force\nan immediate update to the view: invoke the [run](#view_run) method when ready.\n\n<a name=\"view_width\" href=\"#view_width\">#</a>\nview.<b>width</b>([<i>width</i>])\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nGets or sets the view width, in pixels. If no arguments are provided, returns\nthe current width value. If *width* is specified, this method sets the width\nand returns this view instance. This method does not force an immediate update\nto the view: invoke the [run](#view_run) method when ready. This method is\nequivalent to `view.signal('width'[, width])`.\n\n<a name=\"view_height\" href=\"#view_height\">#</a>\nview.<b>height</b>([<i>height</i>])\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nGets or sets the view height, in pixels. If no arguments are provided, returns\nthe current height value. If *height* is specified, this method sets the\nheight and returns this view instance. This method does not force an immediate\nupdate to the view: invoke the [run](#view_run) method when ready. This method\nis equivalent to `view.signal('height'[, height])`.\n\n<a name=\"view_padding\" href=\"#view_padding\">#</a>\nview.<b>padding</b>([<i>padding</i>])\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nGets or sets the view padding, in pixels. Padding objects take the form\n`{left: 5, top: 5, right: 5, bottom: 5}`. If no arguments are provided, returns\nthe current padding value. If *padding* is specified, this method sets the\npadding and returns this view instance. This method does not force an immediate\nupdate to the view: invoke the [run](#view_run) method when ready. This method\nis equivalent to `view.signal('padding'[, padding])`.\n\n<a name=\"view_resize\" href=\"#view_resize\">#</a>\nview.<b>resize</b>()\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nSets a flag indicating that layout autosize calculations should be re-run\non the next pulse propagation cycle. If an autosize method of `\"pad\"` or\n`\"fit\"` is being used, calling this method will cause the chart bounds layout\nto be recomputed the next time the [run](#view_run) method is invoked.\n\n\n### Dataflow and Rendering\n\nMethods for invoking dataflow evaluation and view rendering.\n\n<a name=\"view_run\" href=\"#view_run\">#</a>\nview.<b>run</b>([<i>encode</i>])\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nEvaluates the underlying dataflow graph and returns this view instance. The\noptional *encode* argument is a String value indicating the name of a\ncustom `\"encode\"` set to run in addition to the standard `\"update\"` encoder.\nIf one or more data sets have been queued to be loaded from external files,\nthis method will function asynchronously: the method will initiate file loading\nand return immediately, and the dataflow graph will be evaluated when file\nloading completes. Any scenegraph elements modified during dataflow evaluation\nwill automatically be re-rendered in the view.\n\nInternally, this method invokes the `run` method of the\n[Dataflow](https://github.com/vega/vega-dataflow/blob/master/src/dataflow/Dataflow.js)\nparent class, and then additionally performs rendering.\n\n<a name=\"view_runAfter\" href=\"#view_run\">#</a>\nview.<b>runAfter</b>(<i>callback</i>)\n[<>](https://github.com/vega/vega-dataflow/blob/master/src/dataflow/run.js \"Source\")\n\nSchedules a *callback* function to be invoked after the current dataflow\nevaluation completes. The callback function will be invoked with this view\ninstance provided as the sole parameter. If dataflow evaluation is not\ncurrently occurring, the callback function is invoked immediately.\n\n<a name=\"view_render\" href=\"#view_render\">#</a>\nview.<b>render</b>([<i>update</i>])\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nRenders the scenegraph and returns this view instance. If no arguments are\nprovided, the entire scenegraph is redrawn. If provided, the *update* argument\nshould be an array of \"dirty\" scenegraph items to redraw. Incremental rendering\nwill be performed to redraw only damaged regions of the scenegraph.\n\nDuring normal execution, this method is automatically invoked by the\n[run](#view_run) method. However, clients may explicitly call this method to\n(re-)render the scene on demand (for example, to aid debugging).\n\n<a name=\"view_dirty\" href=\"#view_dirty\">#</a>\nview.<b>dirty</b>(<i>item</i>)\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nReports a \"dirty\" scenegraph item to be re-drawn the next time dataflow\nevaluation completes. This method is typically invoked by dataflow operators\ndirectly to populate a dirty list for incremental rendering.\n\n<a name=\"view_container\" href=\"#view_container\">#</a>\nview.<b>container</b>()\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nReturns the DOM container element for this view, if it exists.\n\n<a name=\"view_scenegraph\" href=\"#view_scenegraph\">#</a>\nview.<b>scenegraph</b>()\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nReturns the [Vega scenegraph](https://github.com/vega/vega-scenegraph)\ninstance for this view.\n\n<a name=\"view_origin\" href=\"#view_origin\">#</a>\nview.<b>origin</b>()\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nReturns the [x, y] origin coordinates for the current view. The origin\ncoordinates indicate the translation of the view's primary coordinate\nsystem, encompassing the left and top padding values as well as any\nadditional padding due to autosize calculations.\n\n\n### Signals\n\nMethods for accessing and updating dataflow *signal* values.\n\n<a name=\"view_signal\" href=\"#view_signal\">#</a>\nview.<b>signal</b>(<i>name</i>[, <i>value</i>])\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nGets or sets a dataflow *signal*. If only the *name* argument is provided,\nreturns the requested signal value. If *value* is also specified, updates the\nsignal and returns this view instance. If the signal does not exist, an error\nwill be raised. This method does not force an immediate update to the view:\ninvoke the [run](#view_run) method when ready.\n\n<a name=\"view_getState\" href=\"#view_getState\">#</a>\nview.<b>getState</b>([<i>options</i>])\n[<>](https://github.com/vega/vega-view/blob/master/src/state.js \"Source\")\n\nGets the state of signals and data sets in this view's backing dataflow\ngraph. If no arguments are specified, returns an object containing both\nsignal values and any modified data sets for this view. By default, the\nexported state includes all signal values (across all mark contexts) except\nfor those bound to data pipeline transforms, and any data sets that were\nexplicitly modified via triggers or the View API.\n\nAn *options* argument can be provided to control what internal state is\ncollected. However, the options involve interacting with internal details\nof a Vega runtime dataflow and is intended for expert use only. The\ndefault options should suffice for state capture in most instances.\n\nThe *options* object supports the following properties:\n- *signals*: A predicate function that accepts a signal\n*name* and *operator* and returns true to export the operator state.\n- *data*: A predicate function that accepts a dataset\n*name* and *dataset* object and returns true to export the data.\n- *recurse*: A boolean flag indicating if the state export process\nshould recurse into mark sub-contexts.\n\n<a name=\"view_setState\" href=\"#view_setState\">#</a>\nview.<b>setState</b>(<i>state</i>)\n[<>](https://github.com/vega/vega-view/blob/master/src/state.js \"Source\")\n\nSets the *state* of signals and/or datasets in this view's backing dataflow\ngraph. The *state* argument should be an object generated by the\n[getState](#view_getState) method. This method updates all implicated\nsignals and data sets, invokes the [run](#view_run) method, and returns this\nview instance.\n\n<a name=\"view_addSignalListener\" href=\"#view_addSignalListener\">#</a>\nview.<b>addSignalListener</b>(<i>name</i>, <i>handler</i>)\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nRegisters a listener for changes to the signal with the given *name* and\nreturns this view instance. If the signal does not exist, an error will be\nraised. This method is idempotent: adding the same handler for the same\nsignal multiple times has no effect beyond the first call.\n\nWhen the signal value changes, the *handler* function is invoked with two\narguments: the *name* of the signal and the new signal *value*. Listeners\nwill be invoked when the signal value *changes* during pulse propagation\n(e.g., after [view.run()](#view_run) is called).\n\nSignal listeners are invoked immediately upon signal update, in the midst\nof dataflow evaluation. As a result, other signal updates and data transforms\nmay have yet to update. If you wish to access the values of other signals,\nor update signal values and re-run the dataflow, use the\n[runAfter](#view_runAfter) method to schedule a callback that performs the\ndesired actions _after_ dataflow evaluation completes. Attempting to call\nthe [run](#view_run) method from within a signal listener will result in an\nerror, as recursive invocation is not allowed.\n\nTo remove a listener, use the\n[removeSignalListener](#view_removeSignalListener) method.\n\n```js\nview.addSignalListener('width', function(name, value) {\n  console.log('WIDTH: ' + value);\n});\nview.width(500).run(); // listener logs 'WIDTH: 500'\n```\n\n<a name=\"view_removeSignalListener\" href=\"#view_removeSignalListener\">#</a>\nview.<b>removeSignalListener</b>(<i>name</i>, <i>handler</i>)\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nRemoves a signal listener registered with the\n[addSignalListener](#view_addSignalListener) method and returns this view\ninstance. If the signal does not exist, an error will be raised. If the\nsignal exists but the provided *handler* is not registered, this method\nhas no effect.\n\n\n### Event Handling\n\nMethods for generating new event streams, registering event listeners, and\nhandling tooltips. See also the [hover](#view_hover) method.\n\n<a name=\"view_events\" href=\"#view_events\">#</a>\nview.<b>events</b>(<i>source</i>, <i>type</i>[, <i>filter</i>])\n[<>](https://github.com/vega/vega-view/blob/master/src/events.js \"Source\")\n\nReturns a new\n[EventStream](https://github.com/vega/vega-dataflow/blob/master/src/EventStream.js)\nfor a specified *source*, event *type*, and optional *filter* function. The\n*source* should be one of `\"view\"` (to specify the current view), `\"window\"`\n(to specify the browser window object), or a valid CSS selector string\n(that will be passed to `document.querySelectorAll`). The event *type* should\nbe a legal DOM event type. If provided, the optional *filter* argument should\nbe a function that takes an event object as input and returns true if it\nshould be included in the produced event stream.\n\nTypically this method is invoked internally to create event streams referenced\nwithin Vega signal definitions. However, callers can use this method to create\ncustom event streams if desired. This method assumes that the view is running\nin a browser environment, otherwise invoking this method may have no effect.\n\n<a name=\"view_addEventListener\" href=\"#view_addEventListener\">#</a>\nview.<b>addEventListener</b>(<i>type</i>, <i>handler</i>[, <i>options</i>])\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nRegisters an event listener for input events and returns this view instance.\nThe event *type* should be a string indicating a legal DOM event type\nsupported by [vega-scenegraph](https://github.com/vega/vega-scenegraph)\nevent handlers. Examples include `\"mouseover\"`, `\"click\"`, `\"keydown\"` and\n`\"touchstart\"`. This method is idempotent: adding the same handler for the\nsame event type multiple times has no effect beyond the first call.\n\nThe optional _options_ hash accepts one parameter (_options.trap_): if _options.trap_ is set to `false`, automatic error trapping for event handler functions is disabled.\n\nWhen events occur, the *handler* function is invoked with two arguments: the\n*event* instance and the currently active scenegraph *item* (which is `null`\nif the event target is the view component itself).\n\nAll registered event handlers are preserved upon changes of renderer. For\nexample, if the View [renderer](#view_renderer) type is changed from\n`\"canvas\"` to `\"svg\"`, all listeners will remain active. To remove a\nlistener, use the [removeEventListener](#view_removeEventListener) method.\n\n```js\nview.addEventListener('click', function(event, item) {\n  console.log('CLICK', event, item);\n});\n```\n\n<a name=\"view_removeEventListener\" href=\"#view_removeEventListener\">#</a>\nview.<b>removeEventListener</b>(<i>type</i>, <i>handler</i>)\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nRemoves an event listener registered with the\n[addEventListener](#view_addEventListener) method and returns this view\ninstance.\n\n<a name=\"view_addResizeListener\" href=\"#view_addResizeListener\">#</a>\nview.<b>addResizeListener</b>(<i>handler</i>)\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nRegisters a listener for changes to the view size and returns this view\ninstance. This method is idempotent: adding the same handler multiple times\nhas no effect beyond the first call.\n\nWhen the view size changes, the *handler* function is invoked with two\narguments: the *width* and *height* of the view.\n\n```js\nview.addResizeListener(function(width, height) {\n  console.log('RESIZE', width, height);\n});\n```\n\n<a name=\"view_removeResizeListener\" href=\"#view_removeResizeListener\">#</a>\nview.<b>removeResizeListener</b>(<i>type</i>, <i>handler</i>)\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nRemoves a listener registered with the\n[addResizeListener](#view_addResizeListener) method and returns this view\ninstance.\n\n\n### Image Export\n\nMethods for exporting static visualization images. These methods can be invoked\neither client-side or server-side.\n\n<a name=\"view_toCanvas\" href=\"#view_toCanvas\">#</a>\nview.<b>toCanvas</b>([<i>scaleFactor</i>])\n[<>](https://github.com/vega/vega-view/blob/master/src/render-to-canvas.js \"Source\")\n\nReturns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\nthat resolves to a canvas instance containing a rendered bitmap image of the\nview. The optional *scaleFactor* argument (default 1) is a number by which to\nmultiply the view width and height when determining the output image size.\nIf invoked in a browser, the returned Promise resolves to an\n[HTML5 canvas](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas)\nelement. If invoked server-side in node.js, the Promise resolves to a\n[node-canvas Canvas](https://github.com/Automattic/node-canvas) instance.\n\n<a name=\"view_toSVG\" href=\"#view_toSVG\">#</a>\nview.<b>toSVG</b>([<i>scaleFactor</i>])\n[<>](https://github.com/vega/vega-view/blob/master/src/render-to-svg.js \"Source\")\n\nReturns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\nthat resolves to an SVG string, providing a vector graphics image of the view.\nThe optional *scaleFactor* argument (default 1) is a number by which to\nmultiply the view width and height when determining the output image size.\n\n<a name=\"view_toImageURL\" href=\"#view_toImageURL\">#</a>\nview.<b>toImageURL</b>(<i>type</i>[, <i>scaleFactor</i>])\n[<>](https://github.com/vega/vega-view/blob/master/src/render-to-image-url.js \"Source\")\n\nReturns a [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\nthat resolves to an image URL for a snapshot of the current view. The *type*\nargument must be one of `'svg'`, `'png'` or `'canvas'`. Both the png and\ncanvas types result in a PNG image. The generated URL can be used to create\ndownloadable visualization images. The optional *scaleFactor* argument\n(default 1) is a number by which to multiply the view width and height when\ndetermining the output image size.\n\n```js\n// generate a PNG snapshot and then download the image\nview.toImageURL('png').then(function(url) {\n  var link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('target', '_blank');\n  link.setAttribute('download', 'vega-export.png');\n  link.dispatchEvent(new MouseEvent('click'));\n}).catch(function(error) { /* error handling */ });\n```\n\n\n### Data and Scales\n\nMethods for accessing *scales* or *data* sets, and performing streaming updates.\n\n<a name=\"view_scale\" href=\"#view_scale\">#</a>\nview.<b>scale</b>(<i>name</i>)\n[<>](https://github.com/vega/vega-view/blob/master/src/scale.js \"Source\")\n\nReturns the [scale](https://github.com/vega/vega-scale) or\n[projection](https://github.com/vega/vega-projection) instance\nwith the given *name*. The return value is a *live* instance used\nby the underlying dataflow. Callers should take care not to modify\nthe returned instance!\n\n<a name=\"view_data\" href=\"#view_data\">#</a>\nview.<b>data</b>(<i>name</i>)\n[<>](https://github.com/vega/vega-view/blob/master/src/data.js \"Source\")\n\nReturns the data set with the given *name*. The returned array of data\nobjects is a *live* array used by the underlying dataflow. Callers that wish\nto modify the returned array should first make a defensive copy,\nfor example using `view.data('name').slice()`.\n\n<a name=\"view_addDataListener\" href=\"#view_addDataListener\">#</a>\nview.<b>addDataListener</b>(<i>name</i>, <i>handler</i>)\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nRegisters a listener for changes to a named data set with the given *name*\nand returns this view instance. If the data set does not exist, an error\nwill be raised. This method is idempotent: adding the same handler for the\nsame data set multiple times has no effect beyond the first call.\n\nWhen the data set value changes, the *handler* function is invoked with two\narguments: the *name* of the signal and the new data set *value*. Listeners\nwill be invoked when the data set value *changes* during pulse propagation\n(e.g., after [view.run()](#view_run) is called). The value passed to the\nhandler is the same as that returned by the [view.data](#view_data) method.\nThe returned array of data objects is a *live* array used by the underlying\ndataflow. Listeners that wish to modify the returned array should first make\na defensive copy, for example using `value.slice()`.\n\nData listeners are invoked immediately upon data set update, in the midst\nof dataflow evaluation. As a result, other signal values and data transforms\nmay have yet to update. If you wish to access the values of other signals or\ndata sets and re-run the dataflow, use the [runAfter](#view_runAfter) method\nto schedule a callback that performs the desired actions _after_ dataflow\nevaluation completes. Attempting to call the [run](#view_run) method from\nwithin a data listener will result in an error, as recursive invocation is\nnot allowed.\n\nTo remove a listener, use the\n[removeDataListener](#view_removeDataListener) method.\n\n```js\nview.addDataListener('source', function(name, value) {\n  console.log(name, value);\n});\n```\n\n<a name=\"view_removeDataListener\" href=\"#view_removeDataListener\">#</a>\nview.<b>removeDataListener</b>(<i>name</i>, <i>handler</i>)\n[<>](https://github.com/vega/vega-view/blob/master/src/View.js \"Source\")\n\nRemoves a data set listener registered with the\n[addDataListener](#view_addDataListener) method and returns this view\ninstance. If the data set does not exist, an error will be raised. If the\ndata set exists but the provided *handler* is not registered, this method\nhas no effect.\n\n<a name=\"view_change\" href=\"#view_change\">#</a>\nview.<b>change</b>(<i>name</i>, <i>changeset</i>)\n[<>](https://github.com/vega/vega-view/blob/master/src/data.js \"Source\")\n\nUpdates the data set with the given *name* with the changes specified by\nthe provided *changeset* instance. This method does not force an immediate\nupdate to the view: invoke the [run](#view_run) method when ready.\n\n```js\nview.change('data', vega.changeset().insert([...]).remove([...]))\n    .run()\n```\n\nInserted data tuples must be JavaScript objects that have been properly\nparsed ahead of time. Any data source `\"format\"` directives in a Vega JSON\nspecification will **not** be applied to tuples added through the View API.\nInternally, this method takes the provided\n[ChangeSet](https://github.com/vega/vega-dataflow/blob/master/src/ChangeSet.js)\nand invokes\n[Dataflow.pulse](https://github.com/vega/vega-dataflow/blob/master/src/dataflow/update.js).\nSee [vega-dataflow](https://github.com/vega/vega-dataflow) for more.\n\n<a name=\"view_insert\" href=\"#view_insert\">#</a>\nview.<b>insert</b>(<i>name</i>, <i>tuples</i>)\n[<>](https://github.com/vega/vega-view/blob/master/src/data.js \"Source\")\n\nInserts an array of new data *tuples* into the data set with the given *name*,\nthen returns this view instance. The input *tuples* array should contain one\nor more data objects that are not already included in the data set. This\nmethod does not force an immediate update to the view: invoke the\n[run](#view_run) method when ready. Insert can not be used in combination with\nthe [remove](#view_remove) method on the same pulse; to simultaneously add\nand remove data use the [change](#view_change) method.\n\nInserted data tuples must be JavaScript objects that have been properly\nparsed ahead of time. Any data source `\"format\"` directives in a Vega JSON\nspecification will **not** be applied to tuples added through the View API.\nInternally, this method creates a\n[ChangeSet](https://github.com/vega/vega-dataflow/blob/master/src/ChangeSet.js)\nand invokes\n[Dataflow.pulse](https://github.com/vega/vega-dataflow/blob/master/src/dataflow/update.js).\nSee [vega-dataflow](https://github.com/vega/vega-dataflow) for more.\n\n<a name=\"view_remove\" href=\"#view_remove\">#</a>\nview.<b>remove</b>(<i>name</i>, <i>tuples</i>)\n[<>](https://github.com/vega/vega-view/blob/master/src/data.js \"Source\")\n\nRemoves data *tuples* from the data set with the given *name*,\nthen returns this view instance. The *tuples* argument can either be an\narray of tuples already included in the data set, or a predicate function\nindicating which tuples should be removed. This method does not force an\nimmediate update to the view: invoke the [run](#view_run) method when ready.\nRemove can not be used in combination with the [insert](#view_insert) method\non the same pulse; to simultaneously add and remove data use the\n[change](#view_change) method.\n\nFor example, to remove all tuples in the `'table'` data set with a `count`\nproperty less than five:\n```js\nview.remove('table', function(d) { return d.count < 5; }).run();\n```\n\nInternally, this method creates a\n[ChangeSet](https://github.com/vega/vega-dataflow/blob/master/src/ChangeSet.js)\nand invokes\n[Dataflow.pulse](https://github.com/vega/vega-dataflow/blob/master/src/dataflow/update.js).\nSee [vega-dataflow](https://github.com/vega/vega-dataflow) for more.\n",
    "licenseText": "Copyright (c) 2016, University of Washington Interactive Data Lab\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n  may be used to endorse or promote products derived from this software\n  without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/vega-view/-/vega-view-3.4.1.tgz#8f36fea88792b3b1ee3a535c5322dc7ecd975532",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/vega-view/-/vega-view-3.4.1.tgz",
    "hash": "8f36fea88792b3b1ee3a535c5322dc7ecd975532",
    "registry": "npm",
    "packageName": "vega-view"
  },
  "registry": "npm",
  "hash": "8f36fea88792b3b1ee3a535c5322dc7ecd975532"
}