{
  "manifest": {
    "name": "xterm",
    "description": "Full xterm terminal, in your browser",
    "version": "3.3.0",
    "ignore": [
      "demo",
      "test",
      ".gitignore"
    ],
    "main": "lib/Terminal.js",
    "types": "typings/xterm.d.ts",
    "repository": {
      "type": "git",
      "url": "https://github.com/xtermjs/xterm.js"
    },
    "license": "MIT",
    "files": [
      "*.js",
      "*.json",
      "dist/*.css",
      "dist/**/*.css",
      "dist/*.js",
      "dist/*.js.map",
      "dist/**/*.js",
      "dist/**/*.js.map",
      "lib/*.css",
      "lib/**/*.css",
      "lib/*.d.ts",
      "lib/*.js",
      "lib/*.js.map",
      "lib/**/*.d.ts",
      "lib/**/*.js",
      "lib/**/*.js.map",
      "src/*.css",
      "src/**/*.css",
      "src/*.js",
      "src/*.js.map",
      "src/*.ts",
      "src/**/*.js",
      "src/**/*.js.map",
      "src/**/*.ts",
      "typings/*.d.ts"
    ],
    "devDependencies": {
      "@types/chai": "^3.4.34",
      "@types/jsdom": "^11.0.1",
      "@types/mocha": "^2.2.33",
      "@types/node": "^6.0.41",
      "@types/text-encoding": "0.0.32",
      "browserify": "^13.3.0",
      "chai": "3.5.0",
      "docdash": "0.4.0",
      "express": "4.13.4",
      "express-ws": "2.0.0-rc.1",
      "fs-extra": "^1.0.0",
      "glob": "^7.0.5",
      "gulp": "3.9.1",
      "gulp-cli": "^1.2.2",
      "gulp-concat": "^2.6.1",
      "gulp-coveralls": "^0.1.4",
      "gulp-istanbul": "^1.1.1",
      "gulp-mocha": "^3.0.1",
      "gulp-sourcemaps": "1.9.1",
      "gulp-typescript": "^3.1.3",
      "gulp-util": "3.0.8",
      "jsdoc": "3.4.3",
      "jsdom": "^11.1.0",
      "merge-stream": "^1.0.1",
      "node-pty": "^0.7.2",
      "nodemon": "1.10.2",
      "sorcery": "^0.10.0",
      "tslint": "^5.9.1",
      "typescript": "~2.7.1",
      "vinyl-buffer": "^1.0.0",
      "vinyl-source-stream": "^1.1.0",
      "webpack": "^3.10.0",
      "webpack-stream": "^4.0.0",
      "zmodem.js": "^0.1.5"
    },
    "scripts": {
      "start": "node demo/app",
      "prestart-zmodem": "npm run build",
      "start-zmodem": "node build/addons/zmodem/demo/app",
      "lint": "tslint src/*.ts src/**/*.ts",
      "test": "gulp test",
      "build:docs": "jsdoc -c jsdoc.json",
      "tsc": "tsc",
      "build": "gulp build",
      "prepublish": "npm run build",
      "coveralls": "gulp coveralls",
      "webpack": "gulp webpack",
      "watch": "gulp watch"
    },
    "dependencies": {},
    "_registry": "npm",
    "_loc": "/opt/app-root/src/.cache/yarn/v2/npm-xterm-3.3.0-b09a19fc2cd5decd21112e5c9dab0b61991f6cf3/package.json",
    "readmeFilename": "README.md",
    "readme": "# [![xterm.js logo](logo-full.png)](https://xtermjs.org)\n\n[![xterm.js build status](https://api.travis-ci.org/xtermjs/xterm.js.svg)](https://travis-ci.org/xtermjs/xterm.js) [![Coverage Status](https://coveralls.io/repos/github/sourcelair/xterm.js/badge.svg)](https://coveralls.io/github/sourcelair/xterm.js) [![Gitter](https://badges.gitter.im/sourcelair/xterm.js.svg)](https://gitter.im/sourcelair/xterm.js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge) [![jsDelivr Hits](https://data.jsdelivr.com/v1/package/npm/xterm/badge?style=rounded)](https://www.jsdelivr.com/package/npm/xterm)\n\nXterm.js is a terminal front-end component written in JavaScript that works in the browser.\n\nIt enables applications to provide fully featured terminals to their users and create great development experiences.\n\n## Features\n- **Text-based application support**: Use xterm.js to work with applications like `bash`, `git` etc.\n- **Curses-based application support**: Use xterm.js to work with applications like `vim`, `tmux` etc.\n- **Mouse events support**: Xterm.js captures mouse events like click and scroll and passes them to the terminal's back-end controlling process\n- **CJK (Chinese, Japanese, Korean) character support**: Xterm.js renders CJK characters seamlessly\n- **IME support**: Insert international (including CJK) characters using IME input with your keyboard\n- **Self-contained library**: Xterm.js works on its own. It does not require any external libraries like jQuery or React to work\n- **Modular, event-based API**: Lets you build addons and themes with ease\n\n## What xterm.js is not\n- Xterm.js is not a terminal application that you can download and use on your computer\n- Xterm.js is not `bash`. Xterm.js can be connected to processes like `bash` and let you interact with them (provide input, receive output)\n\n## Getting Started\n\nFirst you need to install the module, we ship exclusively through [npm](https://www.npmjs.com/) so you need that installed and then add xterm.js as a dependency by running:\n\n```\nnpm install xterm\n```\n\nTo start using xterm.js on your browser, add the `xterm.js` and `xterm.css` to the head of your html page. Then create a `<div id=\"terminal\"></div>` onto which xterm can attach itself.\n\n```html\n<!doctype html>\n  <html>\n    <head>\n      <link rel=\"stylesheet\" href=\"node_modules/xterm/dist/xterm.css\" />\n      <script src=\"node_modules/xterm/dist/xterm.js\"></script>\n    </head>\n    <body>\n      <div id=\"terminal\"></div>\n      <script>\n      \tvar term = new Terminal();\n        term.open(document.getElementById('terminal'));\n        term.write('Hello from \\033[1;3;31mxterm.js\\033[0m $ ')\n      </script>\n    </body>\n  </html>\n```\n\nFinally instantiate the `Terminal` object and then call the `open` function with the DOM object of the `div`.\n\n### Importing\n\nThe proposed way to load xterm.js is via the ES6 module syntax.\n\n```javascript\nimport { Terminal } from 'xterm';\n```\n\n*Note: There are currently no typings for addons so you will need to upcast if using TypeScript, eg. `(<any>xterm).fit()`.*\n\n### Addons\n\nAddons are JavaScript modules that extend the `Terminal` prototype with new methods and attributes to provide additional functionality. There are a handful available in the main repository in the `src/addons` directory and you can even write your own, by using xterm.js' public API.\n\nTo use an addon, just import the JavaScript module and pass it to `Terminal`'s `applyAddon` method:\n\n```javascript\nimport { Terminal } from xterm;\nimport * as fit from 'xterm/lib/addons/fit/fit';\n\n\nTerminal.applyAddon(fit);\n\nvar xterm = new Terminal();  // Instantiate the terminal\nxterm.fit();                 // Use the `fit` method, provided by the `fit` addon\n```\n\n## Browser Support\n\nSince xterm.js is typically implemented as a developer tool, only modern browsers are supported officially. Here is a list of the versions we aim to support:\n\n- Chrome latest\n- Edge latest\n- Firefox latest\n- Safari latest\n- IE11\n\nXterm.js works seamlessly in Electron apps and may even work on earlier versions of the browsers but these are the browsers we strive to keep working.\n\n## Real-world uses\nXterm.js is used in several world-class applications to provide great terminal experiences.\n\n- [**SourceLair**](https://www.sourcelair.com/): In-browser IDE that provides its users with fully-featured Linux terminals based on xterm.js\n- [**Microsoft Visual Studio Code**](http://code.visualstudio.com/): Modern, versatile and powerful open source code editor that provides an integrated terminal based on xterm.js\n- [**ttyd**](https://github.com/tsl0922/ttyd): A command-line tool for sharing terminal over the web, with fully-featured terminal emulation based on xterm.js\n- [**Katacoda**](https://www.katacoda.com/): Katacoda is an Interactive Learning Platform for software developers, covering the latest Cloud Native technologies.\n- [**Eclipse Che**](http://www.eclipse.org/che): Developer workspace server, cloud IDE, and Eclipse next-generation IDE.\n- [**Codenvy**](http://www.codenvy.com): Cloud workspaces for development teams.\n- [**CoderPad**](https://coderpad.io): Online interviewing platform for programmers. Run code in many programming languages, with results displayed by `xterm.js`.\n- [**WebSSH2**](https://github.com/billchurch/WebSSH2): A web based SSH2 client using `xterm.js`, socket.io, and ssh2.\n- [**Spyder Terminal**](https://github.com/spyder-ide/spyder-terminal): A full fledged system terminal embedded on Spyder IDE.\n- [**Cloud Commander**](https://cloudcmd.io \"Cloud Commander\"): Orthodox web file manager with console and editor.\n- [**Codevolve**](https://www.codevolve.com \"Codevolve\"): Online platform for interactive coding and web development courses. Live container-backed terminal uses `xterm.js`.\n- [**RStudio**](https://www.rstudio.com/products/RStudio \"RStudio\"): RStudio is an integrated development environment (IDE) for R.\n- [**Terminal for Atom**](https://github.com/jsmecham/atom-terminal-tab): A simple terminal for the Atom text editor.\n- [**Eclipse Orion**](https://orionhub.org): A modern, open source software development environment that runs in the cloud. Code, deploy and run in the cloud.\n- [**Gravitational Teleport**](https://github.com/gravitational/teleport): Gravitational Teleport is a modern SSH server for remotely accessing clusters of Linux servers via SSH or HTTPS.\n- [**Hexlet**](https://en.hexlet.io): Practical programming courses (JavaScript, PHP, Unix, databases, functional programming). A steady path from the first line of code to the first job.\n- [**Selenoid UI**](https://github.com/aerokube/selenoid-ui): Simple UI for the scallable golang implementation of Selenium Hub named Selenoid. We use XTerm for streaming logs over websockets from docker containers.\n- [**Portainer**](https://portainer.io): Simple management UI for Docker.\n- [**SSHy**](https://github.com/stuicey/SSHy): HTML5 Based SSHv2 Web Client with E2E encryption utilising `xterm.js`, SJCL & websockets.\n- [**JupyterLab**](https://github.com/jupyterlab/jupyterlab): An extensible\ncomputational environment for Jupyter, supporting interactive data science and scientific computing across all programming languages.\n- [**Theia**](https://github.com/theia-ide/theia): Theia is a cloud & desktop IDE framework implemented in TypeScript.\n- [**Opshell**](https://github.com/ricktbaker/opshell) Ops Helper tool to make life easier working with AWS instances across multiple organizations.\n- [**Proxmox VE**](https://www.proxmox.com/en/proxmox-ve): Proxmox VE is a complete open-source platform for enterprise virtualization. It uses xterm.js for container terminals and the host shell.\n- [**Script Runner**](https://github.com/ioquatix/script-runner): Run scripts (or a shell) in Atom.\n- [**Whack Whack Terminal**](https://github.com/Microsoft/WhackWhackTerminal): Terminal emulator for Visual Studio 2017.\n- [**VTerm**](https://github.com/vterm/vterm): Extensible terminal emulator based on Electron and React.\n- [**electerm**](http://electerm.html5beta.com): electerm is a terminal/ssh/sftp client(mac, win, linux) based on electron/node-pty/xterm.\n- [**Kubebox**](https://github.com/astefanutti/kubebox): Terminal console for Kubernetes clusters.\n- [**Azure Cloud Shell**](https://shell.azure.com): Azure Cloud Shell is a Microsoft-managed admin machine built on Azure, for Azure.\n- [**atom-xterm**](https://atom.io/packages/atom-xterm): Atom plugin for providing terminals inside your Atom workspace.\n- [**rtty**](https://github.com/zhaojh329/rtty): A reverse proxy WebTTY. It is composed of the client and the server.\n- [**Pisth**](https://github.com/ColdGrub1384/Pisth): An SFTP and SSH client for iOS\n- [**abstruse**](https://github.com/bleenco/abstruse): Abstruse CI is a continuous integration platform based on Node.JS and Docker.\n- [**Microsoft SQL Operations Studio**](https://github.com/Microsoft/sqlopsstudio): A data management tool that enables working with SQL Server, Azure SQL DB and SQL DW from Windows, macOS and Linux\n- [**FreeMAN**](https://github.com/matthew-matvei/freeman): A free, cross-platform file manager for power users\n- [**Fluent Terminal**](https://github.com/felixse/FluentTerminal): A terminal emulator based on UWP and web technologies.\n\nDo you use xterm.js in your application as well? Please [open a Pull Request](https://github.com/sourcelair/xterm.js/pulls) to include it here. We would love to have it in our list.\n\n## Demo\n\nXterm.js ships with a barebones demo implementation, designed for the development and evaluation of the library only. Exposing the demo to the public as is would introduce security risks for the host.\n\nBelow you can find instructions on how to run the demo on different platforms.\n\n### SourceLair\n\nSourceLair will run the demo and builder in parallel automatically. Just make sure to choose the \"Node.js\" project type, when cloning the xterm.js repo (or just use this shortcut; https://lair.io/xtermjs/xtermjs).\n\nThen open your project's [Public URL](https://help.sourcelair.com/projects/the-public-url/) to access the demo.\n\n### Docker\n\nFirst, make sure you have Docker Engine 1.13.0 (or newer) and Docker Compose 1.10.0 (or newer).\n\nXterm.js [provides a pre-built Docker image](https://hub.docker.com/r/xtermjs/xterm.js/) to help run the demo easily (Git tags are built as [tagged Docker images](https://hub.docker.com/r/xtermjs/xterm.js/tags/) too).\n\nTo run the just demo (with no editing access). run the following command in your terminal:\n\n```\ndocker run -p 3000:3000 xtermjs/xterm.js\n```\n\nThen open http://0.0.0.0:3000 in a web browser to access the demo.\n\nTo run the demo and builder in parallel, run the following command in your terminal:\n\n```\ndocker-compose up\n```\n\nThen open http://0.0.0.0:3000 in a web browser to access the demo. If you prefer a different port than `3000` to access the xterm.js demo, then set the `XTERMJS_PORT` environment variable to the desired port.\n\n### Foreman (or other Procfile runner)\n\nFirst, be sure that a C++ compiler such as GCC-C++ or Clang is installed, then run the following commands in your terminal:\n\n```\nnpm install\nforeman start  # Replace foreman with \"honcho\", \"forego\" etc. depending on your runner\n```\n\nThen open http://0.0.0.0:3000 in a web browser to access the demo.\n\n### Linux or macOS\n\nFirst, be sure that a C++ compiler such as GCC-C++ or Clang is installed, then run the following commands in your terminal:\n\n```\nnpm install\nnpm start      # Run this in its own terminal\nnpm run watch  # Run this in its own terminal\n```\n\nThen open http://0.0.0.0:3000 in a web browser to access the demo.\n\n### Windows\n\nFirst, ensure [node-gyp](https://github.com/nodejs/node-gyp) is installed and configured correctly, then run the following commands in your terminal:\n\n```\nnpm install\nnpm start      # Run this in its own terminal\nnpm run watch  # Run this in its own terminal\n```\n\nThen open http://127.0.0.1:3000 in a web browser to access the demo.\n\n*Note: Do not use ConEmu, as it seems to break the demo for some reason.*\n\n## Releases\n\nXterm.js follows a monthly release cycle roughly.\n\nThe existing releases are available at this GitHub repo's [Releases](https://github.com/sourcelair/xterm.js/releases), while the roadmap is available as [Milestones](https://github.com/sourcelair/xterm.js/milestones).\n\n## Development and Contribution\n\nXterm.js is maintained by [SourceLair](https://www.sourcelair.com/) and a few external contributors, but we would love to receive contributions from everyone!\n\nTo contribute either code, documentation or issues to xterm.js please read the [Contributing document](CONTRIBUTING.md) beforehand. The development of xterm.js does not require any special tool. All you need is an editor that supports JavaScript/TypeScript and a browser. You will need Node.js installed locally to get all the features working in the demo.\n\n### Code structure\n\n`src/` is roughly split up into areas of functionality such as `renderer/` that handles all rendering and `utils/` which provides general utility functions. The `shared/` folder contains code that can be used from either the main thread or a web worker thread, all code inside a `shared/` folder should only ever import other code from a `shared/` folder to minimize the amount of code run what launching a web worker.\n\n## License Agreement\n\nIf you contribute code to this project, you are implicitly allowing your code to be distributed under the MIT license. You are also implicitly verifying that all code is your original work.\n\nCopyright (c) 2017-2018, [The xterm.js authors](https://github.com/xtermjs/xterm.js/graphs/contributors) (MIT License)\nCopyright (c) 2014-2017, SourceLair, Private Company ([www.sourcelair.com](https://www.sourcelair.com/home)) (MIT License)\nCopyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n",
    "licenseText": "Copyright (c) 2014-2016, SourceLair Private Company (https://www.sourcelair.com)\nCopyright (c) 2012-2013, Christopher Jeffrey (https://github.com/chjj/)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/xterm/-/xterm-3.3.0.tgz#b09a19fc2cd5decd21112e5c9dab0b61991f6cf3",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/xterm/-/xterm-3.3.0.tgz",
    "hash": "b09a19fc2cd5decd21112e5c9dab0b61991f6cf3",
    "registry": "npm",
    "packageName": "xterm"
  },
  "registry": "npm",
  "hash": "b09a19fc2cd5decd21112e5c9dab0b61991f6cf3"
}